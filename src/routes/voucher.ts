import { Router } from 'express';
import AuthMiddleware from '../middlewares/auth';
import { checkRole } from '../middlewares/checkRole';
import { RoleEnum } from '../utils/shopp.enum';
import VoucherMiddleware from '../middlewares/voucher';
const routes = Router();

/**
 * @swagger
 * /voucher/list-all:
 *  get:
 *   tags:
 *    - Voucher
 *   security:
 *    - bearerAuth: []
 *   summary: Get all vouchers (CUSTOMER)
 *   description: Get all vouchers (CUSTOMER)
 *   responses:
 *    200:
 *     description: Success
 *     content:
 *      application/json:
 *       schema:
 *        $ref: '#/components/schemas/VoucherListResponse'
 *    400:
 *     $ref: '#/components/responses/400BadRequest'
 *    401:
 *     $ref: '#/components/responses/401Unauthorized'
 */
routes.get(
  '/list-all',
  [AuthMiddleware.checkJwt, checkRole(RoleEnum.CUSTOMER)],
  VoucherMiddleware.listAll
);

/**
 * @swagger
 * /voucher/list-shopP:
 *  get:
 *   tags:
 *    - Voucher
 *   security:
 *    - bearerAuth: []
 *   summary: Get vouchers generated by shopP (CUSTOMER)
 *   description: Get vouchers generated by shopP (CUSTOMER)
 *   responses:
 *    200:
 *     description: Success
 *     content:
 *      application/json:
 *       schema:
 *        $ref: '#/components/schemas/VoucherListResponse'
 *    400:
 *     $ref: '#/components/responses/400BadRequest'
 *    401:
 *     $ref: '#/components/responses/401Unauthorized'
 */
routes.get(
  '/list-shopP',
  [AuthMiddleware.checkJwt, checkRole(RoleEnum.CUSTOMER)],
  VoucherMiddleware.listAppVouchers
);

/**
 * @swagger
 * /voucher/list-shop:
 *  get:
 *   tags:
 *    - Voucher
 *   security:
 *    - bearerAuth: []
 *   summary: Get vouchers generated by shop (CUSTOMER)
 *   description: Get vouchers generated by shop (CUSTOMER)
 *   responses:
 *    200:
 *     description: Success
 *     content:
 *      application/json:
 *       schema:
 *        $ref: '#/components/schemas/VoucherListResponse'
 *    400:
 *     $ref: '#/components/responses/400BadRequest'
 *    401:
 *     $ref: '#/components/responses/401Unauthorized'
 */
routes.get(
  '/list-shop',
  [AuthMiddleware.checkJwt, checkRole(RoleEnum.CUSTOMER)],
  VoucherMiddleware.listShopVouchers
);

/**
 * @swagger
 * /voucher/list-by-shop-id/{shopId}:
 *  get:
 *   tags:
 *    - Voucher
 *   security:
 *    - bearerAuth: []
 *   summary: Get vouchers generated by a specific shop (CUSTOMER)
 *   description: Get vouchers generated by a specific shop (CUSTOMER)
 *   parameters:
 *    - in: path
 *      name: shopId
 *      schema:
 *       type: string
 *       format: uuid
 *      required: true
 *      description: id of shop
 *      example: 1fbe4ea5-a957-40bf-9d59-6f390aecaaa3
 *   responses:
 *    200:
 *     description: Success
 *     content:
 *      application/json:
 *       schema:
 *        $ref: '#/components/schemas/VoucherListResponse'
 *    400:
 *     $ref: '#/components/responses/400BadRequest'
 *    401:
 *     $ref: '#/components/responses/401Unauthorized'
 */
routes.get(
  '/list-by-shop-id/:shopId',
  [AuthMiddleware.checkJwt, checkRole(RoleEnum.CUSTOMER)],
  VoucherMiddleware.listVouchersByShopId
);

/**
 * @swagger
 * /voucher/new:
 *  post:
 *   tags:
 *    - Voucher
 *   security:
 *    - bearerAuth: []
 *   summary: Create new voucher (SHOP, ADMIN)
 *   description: Create new voucher (SHOP, ADMIN)
 *   requestBody:
 *    content:
 *     application/json:
 *      schema:
 *       $ref: '#/components/schemas/VoucherRequest'
 *   responses:
 *    200:
 *     description: Success
 *     content:
 *      application/json:
 *       schema:
 *        $ref: '#/components/schemas/VoucherListResponse'
 *    400:
 *     $ref: '#/components/responses/400BadRequest'
 *    401:
 *     $ref: '#/components/responses/401Unauthorized'
 */
routes.post(
  '/new',
  [AuthMiddleware.checkJwt, checkRole(RoleEnum.SHOP)],
  VoucherMiddleware.newVoucher
);

/**
 * @swagger
 * /voucher/{id}:
 *  post:
 *   tags:
 *    - Voucher
 *   security:
 *    - bearerAuth: []
 *   summary: Edit voucher (SHOP, ADMIN)
 *   description: Edit voucher (SHOP, ADMIN)
 *   parameters:
 *    - in: path
 *      name: id
 *      schema:
 *       type: string
 *       format: uuid
 *      required: true
 *      description: id of voucher
 *      example: f191d8ad-3d10-4681-9b14-95d8de1e61e1
 *   requestBody:
 *    content:
 *     application/json:
 *      schema:
 *       $ref: '#/components/schemas/VoucherRequest'
 *   responses:
 *    200:
 *     description: Success
 *     content:
 *      application/json:
 *       schema:
 *        $ref: '#/components/schemas/VoucherResponse'
 *    400:
 *     $ref: '#/components/responses/400BadRequest'
 *    401:
 *     $ref: '#/components/responses/401Unauthorized'
 */
routes.post(
  '/:id',
  [AuthMiddleware.checkJwt, checkRole(RoleEnum.SHOP)],
  VoucherMiddleware.editVoucher
);

/**
 * @swagger
 * /voucher/delete/{id}:
 *  get:
 *   tags:
 *    - Voucher
 *   security:
 *    - bearerAuth: []
 *   summary: Delete voucher (SHOP, ADMIN)
 *   description: Delete voucher (SHOP, ADMIN)
 *   parameters:
 *    - in: path
 *      name: id
 *      schema:
 *       type: string
 *       format: uuid
 *      required: true
 *      description: id of voucher
 *      example: f191d8ad-3d10-4681-9b14-95d8de1e61e1
 *   responses:
 *    200:
 *     $ref: '#/components/responses/200OK'
 *    400:
 *     $ref: '#/components/responses/400BadRequest'
 *    401:
 *     $ref: '#/components/responses/401Unauthorized'
 */
routes.get(
  '/delete/:id',
  [AuthMiddleware.checkJwt, checkRole(RoleEnum.SHOP)],
  VoucherMiddleware.deleteVoucher
);

/**
 * @swagger
 * /voucher/save-voucher/{id}:
 *  post:
 *   tags:
 *    - Voucher
 *   security:
 *    - bearerAuth: []
 *   summary: Save voucher into customer wallet (CUSTOMER)
 *   description: Save voucher into customer wallet (CUSTOMER)
 *   parameters:
 *    - in: path
 *      name: id
 *      schema:
 *       type: string
 *       format: uuid
 *      required: true
 *      description: id of voucher
 *      example: f191d8ad-3d10-4681-9b14-95d8de1e61e1
 *   responses:
 *    200:
 *     $ref: '#/components/responses/200OK'
 *    400:
 *     $ref: '#/components/responses/400BadRequest'
 *    401:
 *     $ref: '#/components/responses/401Unauthorized'
 */
routes.post(
  '/save-voucher/:id',
  [AuthMiddleware.checkJwt, checkRole(RoleEnum.CUSTOMER)],
  VoucherMiddleware.saveVoucher
);

/**
 * @swagger
 * /voucher/delete-customer-voucher/{id}:
 *  post:
 *   tags:
 *    - Voucher
 *   security:
 *    - bearerAuth: []
 *   summary: Delete voucher from customer wallet (CUSTOMER)
 *   description: Delete voucher from customer wallet (CUSTOMER)
 *   parameters:
 *    - in: path
 *      name: id
 *      schema:
 *       type: string
 *       format: uuid
 *      required: true
 *      description: id of voucher
 *      example: f191d8ad-3d10-4681-9b14-95d8de1e61e1
 *   responses:
 *    200:
 *     $ref: '#/components/responses/200OK'
 *    400:
 *     $ref: '#/components/responses/400BadRequest'
 *    401:
 *     $ref: '#/components/responses/401Unauthorized'
 */
routes.post(
  '/delete-customer-voucher/:id',
  [AuthMiddleware.checkJwt, checkRole(RoleEnum.CUSTOMER)],
  VoucherMiddleware.deleteCustomerVoucher
);

/**
 * @swagger
 * /voucher/customer-ShopP:
 *  get:
 *   tags:
 *    - Voucher
 *   security:
 *    - bearerAuth: []
 *   summary: Show ShopP vouchers from customer wallet (CUSTOMER)
 *   description: Show ShopP vouchers from customer wallet (CUSTOMER)
 *   responses:
 *    200:
 *     description: Success
 *     content:
 *      application/json:
 *       schema:
 *        $ref: '#/components/schemas/VoucherListResponse'
 *    400:
 *     $ref: '#/components/responses/400BadRequest'
 *    401:
 *     $ref: '#/components/responses/401Unauthorized'
 */
routes.get(
  '/customer-ShopP',
  [AuthMiddleware.checkJwt, checkRole(RoleEnum.CUSTOMER)],
  VoucherMiddleware.showCustomerAppVouchers
);

/**
 * @swagger
 * /voucher/customer-Shop:
 *  get:
 *   tags:
 *    - Voucher
 *   security:
 *    - bearerAuth: []
 *   summary: Show shop vouchers from customer wallet (CUSTOMER)
 *   description: Show shop vouchers from customer wallet (CUSTOMER)
 *   responses:
 *    200:
 *     description: Success
 *     content:
 *      application/json:
 *       schema:
 *        $ref: '#/components/schemas/VoucherListResponse'
 *    400:
 *     $ref: '#/components/responses/400BadRequest'
 *    401:
 *     $ref: '#/components/responses/401Unauthorized'
 */
routes.get(
  '/customer-Shop',
  [AuthMiddleware.checkJwt, checkRole(RoleEnum.CUSTOMER)],
  VoucherMiddleware.showCustomerShopVouchers
);

/**
 * @swagger
 * /voucher/customer-freeship:
 *  get:
 *   tags:
 *    - Voucher
 *   security:
 *    - bearerAuth: []
 *   summary: Show freeship shopP vouchers from customer wallet (CUSTOMER)
 *   description: Show freeship shopP vouchers from customer wallet (CUSTOMER)
 *   responses:
 *    200:
 *     description: Success
 *     content:
 *      application/json:
 *       schema:
 *        $ref: '#/components/schemas/VoucherListResponse'
 *    400:
 *     $ref: '#/components/responses/400BadRequest'
 *    401:
 *     $ref: '#/components/responses/401Unauthorized'
 */
routes.get(
  '/customer-freeship',
  [AuthMiddleware.checkJwt, checkRole(RoleEnum.CUSTOMER)],
  VoucherMiddleware.showCustomerFreeshipVouchers
);

/**
 * @swagger
 * /voucher/customer-discount:
 *  get:
 *   tags:
 *    - Voucher
 *   security:
 *    - bearerAuth: []
 *   summary: Show discount shopP vouchers from customer wallet (CUSTOMER)
 *   description: Show discount shopP vouchers from customer wallet (CUSTOMER)
 *   responses:
 *    200:
 *     description: Success
 *     content:
 *      application/json:
 *       schema:
 *        $ref: '#/components/schemas/VoucherListResponse'
 *    400:
 *     $ref: '#/components/responses/400BadRequest'
 *    401:
 *     $ref: '#/components/responses/401Unauthorized'
 */
routes.get(
  '/customer-discount',
  [AuthMiddleware.checkJwt, checkRole(RoleEnum.CUSTOMER)],
  VoucherMiddleware.showCustomerDiscountVouchers
);

/**
 * @swagger
 * /voucher/{id}:
 *  get:
 *   tags:
 *    - Voucher
 *   security:
 *    - bearerAuth: []
 *   summary: Find voucher by id (CUSTOMER)
 *   description: Find voucher by id (CUSTOMER)
 *   parameters:
 *    - in: path
 *      name: id
 *      schema:
 *       type: string
 *       format: uuid
 *      required: true
 *      description: id of voucher
 *      example: f191d8ad-3d10-4681-9b14-95d8de1e61e1
 *   responses:
 *    200:
 *     description: Success
 *     content:
 *      application/json:
 *       schema:
 *        $ref: '#/components/schemas/VoucherResponse'
 *    400:
 *     $ref: '#/components/responses/400BadRequest'
 *    401:
 *     $ref: '#/components/responses/401Unauthorized'
 */
routes.get(
  '/:id',
  [AuthMiddleware.checkJwt, checkRole(RoleEnum.CUSTOMER)],
  VoucherMiddleware.getOneById
);

export default routes;
